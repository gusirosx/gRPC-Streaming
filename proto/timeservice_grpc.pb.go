// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gRPC_Streaming

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeServiceClient is the client API for TimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeServiceClient interface {
	// Stream the TimeResponse
	StreamTime(ctx context.Context, in *Request, opts ...grpc.CallOption) (TimeService_StreamTimeClient, error)
}

type timeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeServiceClient(cc grpc.ClientConnInterface) TimeServiceClient {
	return &timeServiceClient{cc}
}

func (c *timeServiceClient) StreamTime(ctx context.Context, in *Request, opts ...grpc.CallOption) (TimeService_StreamTimeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TimeService_ServiceDesc.Streams[0], "/proto.TimeService/StreamTime", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeServiceStreamTimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TimeService_StreamTimeClient interface {
	Recv() (*TimeResponse, error)
	grpc.ClientStream
}

type timeServiceStreamTimeClient struct {
	grpc.ClientStream
}

func (x *timeServiceStreamTimeClient) Recv() (*TimeResponse, error) {
	m := new(TimeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TimeServiceServer is the server API for TimeService service.
// All implementations must embed UnimplementedTimeServiceServer
// for forward compatibility
type TimeServiceServer interface {
	// Stream the TimeResponse
	StreamTime(*Request, TimeService_StreamTimeServer) error
	mustEmbedUnimplementedTimeServiceServer()
}

// UnimplementedTimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimeServiceServer struct {
}

func (UnimplementedTimeServiceServer) StreamTime(*Request, TimeService_StreamTimeServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTime not implemented")
}
func (UnimplementedTimeServiceServer) mustEmbedUnimplementedTimeServiceServer() {}

// UnsafeTimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeServiceServer will
// result in compilation errors.
type UnsafeTimeServiceServer interface {
	mustEmbedUnimplementedTimeServiceServer()
}

func RegisterTimeServiceServer(s grpc.ServiceRegistrar, srv TimeServiceServer) {
	s.RegisterService(&TimeService_ServiceDesc, srv)
}

func _TimeService_StreamTime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeServiceServer).StreamTime(m, &timeServiceStreamTimeServer{stream})
}

type TimeService_StreamTimeServer interface {
	Send(*TimeResponse) error
	grpc.ServerStream
}

type timeServiceStreamTimeServer struct {
	grpc.ServerStream
}

func (x *timeServiceStreamTimeServer) Send(m *TimeResponse) error {
	return x.ServerStream.SendMsg(m)
}

// TimeService_ServiceDesc is the grpc.ServiceDesc for TimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TimeService",
	HandlerType: (*TimeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTime",
			Handler:       _TimeService_StreamTime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/timeservice.proto",
}
